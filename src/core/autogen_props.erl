% License: Apache License, Version 2.0
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.
%
%% @author Lyle Bertz <lyleb551144@gmail.com>
%% @copyright Copyright 2015 Lyle Bertz
%%
%% @doc A custom behavior for handling multiple auto-generated
%% properties (see auto-prop).  
%%
%% It includes the functions for handling auto-props.  Note that
%% auto-props can be dynamically added to the system.
%%
%% @end
-module(autogen_props).

-define(APROPCFG, autoprops).
-define(APROPREGS, autogen_properties).

-include("e_alto.hrl").

-export([
		init/0,
		definition/1,
		register_autogen_props/1,
		deregister_autogen_props/1,
		is_autogenerated/1,
		valid_context/2,
		generate/2,
		generate_autoprops/2,
		filter/2,
		filter/3
	]).	

-spec filter(Filter :: list(), JSONObject :: any()) -> any().

filter([], JSONObject) ->
	generate_autoprops(JSONObject);
filter(Filter, JSONObject) ->
	_NewStruct = generate_autoprops(Filter,JSONObject),
	utils:apply_attribute_filter(Filter, _NewStruct). 
	
-spec filter(Filter :: list(), BasePath :: any(), JSONObject :: any()) -> any().

filter([], _, JSONObject) ->
	generate_autoprops(JSONObject);
filter(Filter, BasePath, JSONObject) ->
	_NewStruct = generate_autoprops(Filter,JSONObject),
	utils:apply_attribute_filter(Filter, BasePath, _NewStruct). 
	
-spec generate_autoprops(Filter :: list(), JSONObject :: any()) -> any().

generate_autoprops(Filter, JSONObject) ->
	_Registrations = get_registrations(),
	_List = [ X || X <- lists:usort(Filter), lists:keymember(X, #autogenprop.identity,_Registrations) ],
	lists:foldl(fun(E,AccIn) -> generate(E,AccIn) end, JSONObject, _List).

-spec generate_autoprops(JSONObject :: any()) -> any().
	
generate_autoprops(JSONObject) ->
	lists:foldl(fun(E,AccIn) -> generate(E,AccIn) end, JSONObject, get_registrations()).


-spec init() -> ok.

init() ->
	case utils:get_param(?APROPCFG) of
		undefined -> ok;
		_Value ->
			lists:foreach( fun(E) -> register_autogen_props(E) end, _Value) 
	end.

-spec definition( Key :: any() | binary() ) -> #autogenprop{} | undefined.

definition(Key) ->
	lists:keyfind(Key, #autogenprop.identity, get_registrations()).

-spec register_autogen_props( Mod :: any() ) -> any().

register_autogen_props( Module ) ->
	_Registrations = get_registrations(),
	_Props = Module:definitions(),
	_NewValue = lists:foldl( fun(E,AccIn) -> 
					lists:keystore(E#autogenprop.identity, #autogenprop.identity, AccIn, E) end, 
				_Registrations, _Props),
	e_alto_backend:set_constant(?APROPREGS, _NewValue),
	ok.

-spec deregister_autogen_props( Module :: atom() ) -> any().

deregister_autogen_props( Module ) ->
	_Registrations = get_registrations(),
	_Props = Module:definitions(),
	_NewValue = lists:foldl( fun(E,AccIn) -> lists:keydelete(E#autogenprop.identity, #autogenprop.identity, AccIn) end, _Registrations, _Props),
	e_alto_backend:store_constant(?APROPREGS, _NewValue),
	ok.

-spec valid_context(Value :: proplists:property(), Key :: list() | binary() ) -> true | false.
	
valid_context(Context, Key) ->
	case lists:keyfind(Key, #autogenprop.identity, get_registrations()) of
		false -> false;
		Tuple -> (Tuple#autogenprop.testcontext_fun)(Context)
	end.

-spec generate( Key :: list() | binary(), Context :: proplists:property() ) -> { ok, any() } | { error, any() }. 

generate(Key, {PropRoot,_}=Context) ->
	case lists:keyfind(Key, #autogenprop.identity, get_registrations()) of
		false -> false;
		Tuple -> 
			_Context = case (Tuple#autogenprop.testcontext_fun)(Context) of
				false -> 
					lists:foldl(fun(E,ContextIn) ->
							case ej:get({PropRoot,E},ContextIn) of
								true -> ContextIn;
								false -> ej:set({PropRoot,E},ContextIn,generate(E,ContextIn))
							end
						end,
						Context,						
						Tuple#autogenprop.prereqs); 
				true -> Context
			end,
			(Tuple#autogenprop.gen_fun)(_Context)
	end.

-spec is_autogenerated( Key :: list() | binary() ) -> true | false.

is_autogenerated( Key ) ->
	lists:keymember(Key, #autogenprop.identity, get_registrations()).	

%% Internal Functions
get_registrations() ->
	case e_alto_backend:get_constant(?APROPREGS) of
		not_found -> [];
		{_, Val} -> Val
	end.
